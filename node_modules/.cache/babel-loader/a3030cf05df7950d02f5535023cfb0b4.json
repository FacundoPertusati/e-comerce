{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FACU PAPA\\\\Desktop\\\\my-app-master\\\\src\\\\components\\\\ProductCategoryContainer\\\\ProductCategoryContainer.jsx\",\n    _s = $RefreshSig$();\n\n// lista d epasos para poder renderizar los detalles\n// 1) importar react, hooks: usestate, useEffect...\n// 2) importar useParams para poder matchear los id\n// 3) importamos los componentes y base de datos\n// 4) usamos useEfect para poder incluir con USEPARAMS los id  y asi coincidir solo\n// un elemento de la base de datos (id - 1 porque no tenemos id 0)\n// 5) seteamos el state con la respuesta  de la base de datos y la pasamos al componente ITEMDETAIL\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport \"./ProductCategoryContainer.css\"; // components\n\nimport ProductCategoryList from \"../ProductCategoryList/ProductCategoryList\"; // data base\n//import database from '../../DATA/data.json'\n\nimport { getFirestore } from \"../../FIREBASE/Firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProductCategoryContainer() {\n  _s();\n\n  const [spiner, setSpiner] = useState(true);\n  const [item, setItem] = useState([]);\n  const {\n    category\n  } = useParams();\n  useEffect(async () => {\n    setSpiner(true);\n    const db = getFirestore();\n\n    if (category) {\n      const itemCollection = db.collection(`items`).where(\"category\", \"==\", category);\n      itemCollection.get().then(querySnapshot => {\n        // creamos una const asignandole una comparacion que deseemos hacer\n        const filter = querySnapshot.docs.filter(doc => doc.data().category === category);\n\n        if (querySnapshot.size === 0) {\n          console.log(\"sin items\");\n        } else if (filter) {\n          setItem(filter.map(x => x.data())); // con este metodo estamos discriminadno en categorias\n          // si queremos un item individual debemos comparar los id en lugar de category\n          // tenemos que usar el metodo .find en el querySnapshot de {filter}\n        }\n      }).catch(error => {\n        console.log(\"Error al buscar item...\", error);\n      });\n    } else {\n      const itemCollection = db.collection(`items`);\n      itemCollection.get().then(querySnapshot => {\n        // creamos una const asignandole una comparacion que deseemos hacer\n        const filter = querySnapshot.docs.filter(doc => doc.data().category === category);\n\n        if (querySnapshot.size === 0) {\n          console.log(\"sin items\");\n        } else if (filter) {\n          setItem(filter.map(x => x.data())); // con este metodo estamos discriminadno en categorias\n          // si queremos un item individual debemos comparar los id en lugar de category\n          // tenemos que usar el metodo .find en el querySnapshot de {filter}\n        }\n      }).catch(error => {\n        console.log(\"Error al buscar item...\", error);\n      });\n    } // setData(database)\n\n  }, [category]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PRD-container\",\n    children: item.map((x, index) => /*#__PURE__*/_jsxDEV(ProductCategoryList, {\n      param: x,\n      spiner: spiner\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductCategoryContainer, \"6WcTl/hJLCJejkpLE799OJt7EeY=\", false, function () {\n  return [useParams];\n});\n\n_c = ProductCategoryContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductCategoryContainer\");","map":{"version":3,"sources":["C:/Users/FACU PAPA/Desktop/my-app-master/src/components/ProductCategoryContainer/ProductCategoryContainer.jsx"],"names":["React","useState","useEffect","useParams","ProductCategoryList","getFirestore","ProductCategoryContainer","spiner","setSpiner","item","setItem","category","db","itemCollection","collection","where","get","then","querySnapshot","filter","docs","doc","data","size","console","log","map","x","catch","error","index"],"mappings":"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","sourcesContent":["// lista d epasos para poder renderizar los detalles\n// 1) importar react, hooks: usestate, useEffect...\n// 2) importar useParams para poder matchear los id\n// 3) importamos los componentes y base de datos\n// 4) usamos useEfect para poder incluir con USEPARAMS los id  y asi coincidir solo\n// un elemento de la base de datos (id - 1 porque no tenemos id 0)\n// 5) seteamos el state con la respuesta  de la base de datos y la pasamos al componente ITEMDETAIL\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport \"./ProductCategoryContainer.css\";\n// components\nimport ProductCategoryList from \"../ProductCategoryList/ProductCategoryList\";\n// data base\n//import database from '../../DATA/data.json'\nimport { getFirestore } from \"../../FIREBASE/Firebase\";\n\nexport default function ProductCategoryContainer() {\n  const [spiner, setSpiner] = useState(true);\n  const [item, setItem] = useState([]);\n  const { category } = useParams();\n\n  useEffect(async () => {\n    setSpiner(true);\n    const db = getFirestore();\n    if (category) {\n      const itemCollection = db\n        .collection(`items`)\n        .where(\"category\", \"==\", category);\n\n        itemCollection\n      .get()\n      .then((querySnapshot) => {\n        // creamos una const asignandole una comparacion que deseemos hacer\n        const filter = querySnapshot.docs.filter(\n          (doc) => doc.data().category === category\n        );\n        if (querySnapshot.size === 0) {\n          console.log(\"sin items\");\n        } else if (filter) {\n          setItem(filter.map((x) => x.data()));\n          // con este metodo estamos discriminadno en categorias\n          // si queremos un item individual debemos comparar los id en lugar de category\n          // tenemos que usar el metodo .find en el querySnapshot de {filter}\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error al buscar item...\", error);\n      });\n    } else {\n      const itemCollection = db.collection(`items`);\n\n      itemCollection\n      .get()\n      .then((querySnapshot) => {\n        // creamos una const asignandole una comparacion que deseemos hacer\n        const filter = querySnapshot.docs.filter(\n          (doc) => doc.data().category === category\n        );\n        if (querySnapshot.size === 0) {\n          console.log(\"sin items\");\n        } else if (filter) {\n          setItem(filter.map((x) => x.data()));\n          // con este metodo estamos discriminadno en categorias\n          // si queremos un item individual debemos comparar los id en lugar de category\n          // tenemos que usar el metodo .find en el querySnapshot de {filter}\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error al buscar item...\", error);\n      });\n    }\n\n    \n\n    // setData(database)\n  }, [category]);\n\n  return (\n    <div className=\"PRD-container\">\n      {/* {spiner ? \n            <h1>HOLACCAPÃ–</h1>\n            :\n            <>\n             </>\n            } */}\n      {item.map((x, index) => (\n        <ProductCategoryList key={index} param={x} spiner={spiner} />\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}