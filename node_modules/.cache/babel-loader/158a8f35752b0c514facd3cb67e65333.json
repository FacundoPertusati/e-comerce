{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  templateQuasi: new TokContext(\"${\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  if (context.length > 1) {\n    context.pop();\n  }\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.dollarBraceL.updateContext = context => {\n  context.push(types.templateQuasi);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScopeFlags() & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdentIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr);\n  context.push(types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.braceL) {\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.push(types.brace);\n      } else if (curContext === types.j_expr) {\n        context.push(types.templateQuasi);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.length -= 2;\n      context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n};\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, {\n        start: 0\n      }, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      if (type === types$1._class || type === types$1._function) {\n        const curContext = this.curContext();\n\n        if (curContext === types.functionStatement || curContext === types.functionExpression) {\n          this.state.context.pop();\n        }\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      const matched = keywordRelationalOperator.exec(this.input);\n\n      if (matched !== null) {\n        const endCh = this.codePointAtPos(next + matched[0].length);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;","map":{"version":3,"sources":["C:/Users/FACU PAPA/Desktop/my-app-master/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","name","options","token","set","createBinop","types$1","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","slashAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","params","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","String","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","preserveSpace","types","brace","templateQuasi","context","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloPos","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","out","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","getTokenFromCode","charCodeAt","finishOp","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","State","curLine","potentialArrowAt","inPipeline","inPropertyName","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","exprAllowed","containsEsc","strictErrors","tokensLength","strictMode","sourceType","startLine","curPosition","skipArrays","Array","isArray","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","createLookaheadState","lookaheadState","curContext","prevType","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","isLiteralPropertyName","hasPrecedingLineBreak","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","isLineTerminator","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","some","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","p","join","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","codePointAtPos","cp","trail","setStrict","clear","skipSpace","readTmplToken","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","_this$state$type$upda","_this$state$type","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","nextCh","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","parseModuleExpression","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","lookaheadCh","codePointAt","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","functionStatement","functionExpression","reservedTest","delegating","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","matched","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  templateQuasi: new TokContext(\"${\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  if (context.length > 1) {\n    context.pop();\n  }\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.dollarBraceL.updateContext = context => {\n  context.push(types.templateQuasi);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScopeFlags() & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdentIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr);\n  context.push(types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.braceL) {\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.push(types.brace);\n      } else if (curContext === types.j_expr) {\n        context.push(types.templateQuasi);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.length -= 2;\n      context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, {\n        start: 0\n      }, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      if (type === types$1._class || type === types$1._function) {\n        const curContext = this.curContext();\n\n        if (curContext === types.functionStatement || curContext === types.functionExpression) {\n          this.state.context.pop();\n        }\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      const matched = keywordRelationalOperator.exec(this.input);\n\n      if (matched !== null) {\n        const endCh = this.codePointAtPos(next + matched[0].length);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}